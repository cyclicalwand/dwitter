import html
import re2
from string import Template
from typing import Annotated
import json
from dys import _chain, get_script_address, get_caller, BLOCK_INFO
import datetime

CALLER = get_caller() or ""
script_creator = get_script_address()

# Get the time without microseconds
now = datetime.datetime.now()
day = now.day
month = now.month
year = now.year
hour = now.hour
minute = now.minute

date_time_str = f"{day:02d}/{month:02d}/{year}  -  {hour:02d}:{minute:02d}"


def new_post(body: str):
    post_id = str(BLOCK_INFO.height)

    data = {
        "body": body,
        "id": post_id,
        "date": date_time_str,
        "author": CALLER,
    }

    print(data)

    return _chain(
        "dyson/sendMsgCreateStorage",
        creator=script_creator,
        index=script_creator + "/post/" + post_id,
        data=json.dumps(data),
        force=True,
    )


def add_reply(body: str, post_id: str):

    # Query blockchain
    parent_query = _chain(
        "dyson/QueryStorage",
        index=script_creator + "/post/" + post_id,
    )
    if parent_query["error"]:
        return parent_query["error"]
    # get data
    parent_data = json.loads(parent_query["result"]["storage"]["data"])

    # Initialise the replies list if it does not exist
    if "replies" not in parent_data:
        parent_data["replies"] = []
    reply = {
        "body": body,
        "author": CALLER,
        "date": date_time_str,
    }

    parent_data["replies"].append(reply)

    # update chain
    _chain(
        "dyson/sendMsgUpdateStorage",
        creator=script_creator,
        index=script_creator + "/post/" + post_id,
        data=json.dumps(parent_data),
        force=True,
    )


def delete_post(post_id: str):

    parent_query = _chain(
        "dyson/QueryStorage",
        index=script_creator + "/post/" + post_id,
    )
    if parent_query["error"]:
        return parent_query["error"]
    # Get the id of original author
    parent_data = json.loads(parent_query["result"]["storage"]["data"])
    parent_data_author = parent_data.get("author")

    # Check if the caller is original author or script creator
    if CALLER == parent_data_author:
        return _chain(
            "dyson/sendMsgDeleteStorage",
            creator=get_script_address(),
            index=script_creator + "/post/" + post_id,
        )
    elif CALLER == script_creator:
        return _chain(
            "dyson/sendMsgDeleteStorage",
            creator=get_script_address(),
            index=script_creator + "/post/" + post_id,
        )
    else:
        return ["Error, you are not the original author"]


html = [
    Template(
        """
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <title>Dyson message board</title>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">
            <script src="https://unpkg.com/vue@3/dist/vue.global.prod.js"></script>
            <script src="/_/dyson.js"></script>
            <style>
              .wrapper {
                overflow: hidden;
                word-wrap: break-word;
              }
              .center-box {
                width: 300px;
                height: 75px;
                background-color: #f2f2f2;
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
              }
            </style>
          </head>
          <body id="app" class="wrapper">
            <div v-if="loading" class="center-box">
              <div class="box">
                <div class="columns is-centered">
                  <progress class="progress is-small is-primary" max="100">50%</progress>
                </div>
                <p class="has-text-centered">Loading...</p>
              </div>
            </div>
            <div v-else>
            <nav class="navbar is-fixed-top is-primary is-spaced has-shadow" role="navigation" aria-label="main navigation">
              <div class="navbar-brand">
                <div class="navbar-item is-size-3 mr-6">
                  Dyson message board
                </div>
                <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" @click="toggleMenu" :class="{ 'is-active': isMenuActive }">
                  <span aria-hidden="true"></span>
                  <span aria-hidden="true"></span>
                  <span aria-hidden="true"></span>
                </a>
              </div>
              <div id="navbarSwitch" class="navbar-menu" :class="{ 'is-active': isMenuActive }">
                <div class="navbar-start">
                  <div class="navbar-item has-dropdown is-hoverable">
                    <a class="navbar-link is-arrowless is-size-5">
                        About
                    </a>
                    <div class="navbar-dropdown">
                        <a class="navbar-item">
                            Onchain message board
                        </a>
                    </div>
                  </div>
                  <div class="navbar-item has-dropdown is-hoverable">
                    <a href="https://profilepage.dysonvalidator.com/" class="navbar-link is-arrowless is-size-5">
                        Profile
                    </a>
                    <div class="navbar-dropdown">
                      <a class="navbar-item" href="https://profilepage.dysonvalidator.com/" class="has-text-black">
                        Create or edit your profile
                      </a>
                    </div>
                  </div>
                  <div class="navbar-item has-dropdown is-hoverable">
                    <div class="navbar-link is-arrowless is-size-5">
                        Other apps
                    </div>
                    <div class="navbar-dropdown">
                      <ul>
                      <li><a class="navbar-item" href="https://namechecker.dysonvalidator.com/" class="has-text-black">
                         Dys name manager
                      </a></li>
                      <li><a class="navbar-item" href="https://secondarymarket.dysonvalidator.com/" class="has-text-black">
                          Dys names secondary market
                       </a></li>
                    </div>
                  </div>
                  <div class="navbar-item has-dropdown is-hoverable">
                    <div class="navbar-link is-arrowless is-size-5">
                        Dyson protocol info
                    </div>
                    <div class="navbar-dropdown">
                      <ul>
                        <li><a href="https://dysonprotocol.com/" target="_blank" class="navbar-item">Homepage</a></li>
                        <li><a href="https://docs.dysonprotocol.com/" target="_blank" class="navbar-item">Docs</a></li>
                        <li><a href="https://twitter.com/DysonProtocol" target="_blank" class="navbar-item">Twitter</a></li>
                        <li><a href="https://discord.gg/BNHRHGdeNj" target="_blank" class="navbar-item">Discord</a></li>
                        <li><a href="https://medium.com/@dysonprotocol" target="_blank" class="navbar-item">Medium</a></li>
                        <li><a href="https://gitlab.com/dysonproject/dyson" target="_blank" class="navbar-item">Gitlab</a></li>
                      </ul>
                    </div>
                </div>
            </div>
            <div class="navbar-end">
              <div class="navbar-item">
              </div>
            </div>
         </div>
      </nav>
      <section class="section">
        <div class="container">
          <div class="column">
            <div class="column is-full">
              <h1></h1>
            </div>
          </div>
          <div class="columns">
            <div class="column is-one-fifth">
              <div class="content">
                <div class="block">
                  <button v-if="!isConnected" @click.prevent="connectToKeplr" class=" mt-4 button is-primary is-light">
                    <strong>Connect Keplr</strong>
                  </button>
                  <div v-else>
                    <div v-if="userData">
                      <p class="card-header-title">Keplr connected</p>
                      <figure class="image is-128x128">
                        <img class="is-rounded" :src="userData.profile_photo" alt="profile photo">
                      </figure>
                      <p class="is-size-4">{{ userData.username }}</p>
                    </div>
                    <div v-else>
                      <p>Account name: {{ accountData.name }}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="column is-four-fifths">
              <div class="content">
              <h1 class="title">Submit a new post</h1>
              <form>
                <textarea v-model="newPost" class="textarea is-primary" id="newPost" maxlength="400" placeholder="Submit a post"></textarea>
                <p>Characters left: {{ remainingChars }} characters left</p>
                <div class="buttons">
                    <button @click.prevent="submit" class="button is-primary is-outlined">
                      <span>Post</span>
                      <span class="icon is-small">
                        <i class="fa fa-comment fa-lg"></i>
                      </span>
                    </button>
                </div>
              </form>
            <h1 class="is-size-4 has-text-left">Current posts</h1>
            <p>Number of posts: {{ Object.keys(sortedStorage).length }}</p>
            <p>
              <label class="checkbox">
                <input type="checkbox"  v-model="showOnlyMyPosts" :disabled="!isUserLoggedIn">
                Show only my posts
              </label>
             </p>
            <div class="dropdown is-active">
              <div class="dropdown-trigger">
                  <span><p class="is-size-6">Sort by:</p></span>
                  <div class="select">
                    <select id="sort-select" v-model="sortOption">
                      <option class="dropdown-item" value="newest">Newest</option>
                      <option class="dropdown-item" value="oldest">Oldest</option>
                    </select>
                  </div>
                </div>
            </div>
            <div v-if="result" v-for="item in sortedStorage" :key="item.index" class="card mb-4">
              <div class="card-content">
                <div class="content">
                <p>Date posted: {{ item.data.date }}</p>
                <p>Post id: {{ item.data.id }}</p>
                <p>Author: {{ getUsernameFromAddress(item.data.author) }}</p>
                 <p>Message: {{ item.data.body }}</p>
                <h2 class="is-size-5">Replies</h2>
                <p v-if="item.data && item.data.replies">Number of replies: {{ Object.values(item.data.replies).length }}</p>
                <div v-if="item.data && item.data.replies" v-for="reply in item.data.replies" class="card mb-2">
                  <div class="card-content">
                    <div class="content">
                      <p>Date: {{ reply.date }}</p>
                      <p>Author: {{ getUsernameFromAddress(reply.author) }}</p>
                      <p>Message: {{ reply.body }}</p>
                    </div>
                  </div>
                </div>
                  <div>
                    <form>
                      <textarea v-model="item.newReply" class="textarea" maxlength="400" placeholder="submit a reply"></textarea>
                      <p>Maximum 400 characters</p>
                      <div class="buttons">
                        <button class="button is-primary is-outlined" @click.prevent="submitReply(item.data.id, item)">
                          <span>Reply</span>
                          <span class="icon is-small">
                            <i class="fa fa-reply fa-lg"></i>
                          </span>
                        </button>
                        </div>
                        <div class="buttons is-right">
                        <button class="button is-danger is-oulined" @click.prevent="deletePost(item.data.id)">
                          <span>Delete</span>
                          <span class="icon is-small">
                            <i class="fa fa-times fa-lg"></i>
                          </span>
                        </button>
                      </div>
                    </form>
                    <p id="output" v-text="output"></p>
                  </div>
                </div>  
              </div>
              </div>
            </div>
          </div>
        </div>
        </div>
      </section>
            <script>
              // load dyson vue store and subscribe to updates
              DysonLoader().then(() => {
                console.log("DysonLoader loaded");
              });
      
              const app = Vue.createApp({
                data() {
                  return {
                    result: null,
                    sortedItems: [],
                    newPost: "",
                    newReply: "",
                    accountData: null,
                    currentDateTime: "",
                    output: "",
                    postId: "",
                    isMenuActive: false,
                    keplr: null,
                    isConnected: false,
                    sortOption: "newest",
                    usernames: [],
                    userData: "",
                    loading: true,
                    showOnlyMyPosts: false,
                  }
                },
                async created() {
                  const response = await fetch('https://api-dys-testnet.dysonvalidator.com/dyson/storageprefix' + '?' + new URLSearchParams({
                    "prefix": "dys178nsz4x7f3rew089w35cuhsfuxqwf7kc98y2tt/usernames/"
                  }));
                  const json = await response.json();
                  const storage = json.storage;
                  const data = JSON.parse(storage[0].data);
                  this.usernames = data.users;
                },
                methods: {
                  getUsernameFromAddress(address) {
                    if (this.usernames) {
                      const match = this.usernames.find(({ user }) => user === address);
                      return match ? match.username : address;
                    } else {
                      return address;
                    }
                  },
                  
                  async getUserData() {
                    response = await fetch('https://api-dys-testnet.dysonvalidator.com/dyson/storageprefix' + '?' + new URLSearchParams({
                    "prefix": "dys178nsz4x7f3rew089w35cuhsfuxqwf7kc98y2tt/user/" + this.accountData.bech32Address
                    }))
                    const json = await response.json()
                    if (json.storage && json.storage.length > 0 && json.storage[0].data) {
                      const userData = JSON.parse(json.storage[0].data);
                      console.log('userData:', userData);
                      if (userData.profile_photo === '' || userData.profile_photo === 'Empty') {
                        userData.profile_photo = 'https://uxwing.com/wp-content/themes/uxwing/download/peoples-avatars/query-what-how-why-icon.svg';
                      }
                      this.userData = userData;
                    } else {
                      console.error('No user data found');
                    }
                  },
                  
                  async connectToKeplr() {
                    // Check that the Keplr extension is installed
                    if (!window.getOfflineSigner) {
                      alert("Please install the Keplr extension to use this feature.");
                      return;
                    }
                    
                    try {
                      const accountData = await dysonUseKeplr();
                      console.log("Keplr Ready!", accountData);
                      this.accountData = accountData;
                      this.isConnected = true;
                    } catch (e) {
                      console.log("Keplr error:", e);
                    }
                  },
                  
                  toggleMenu() {
                    this.isMenuActive = !this.isMenuActive;
                  },
                  
                async submit() {
                  try {
                    if (!this.accountData) {
                      alert("Please connect your wallet to submit a post.");
                      await this.connectToKeplr();
                    } else {
                      const result = await dysonVueStore.dispatch("dyson/sendMsgRun", {
                        "value": {
                          "creator": this.accountData.bech32Address,
                          "address": "dys1c2t867e7x33jw8c8mrl6cdvn89934k82tjvnqr",
                          "function_name": "new_post",
                          "kwargs": JSON.stringify({ "body": this.newPost }),
                          "coins": ""
                        },
                        "fee": [{ amount: '50', denom: 'dys' }],
                        "gas": "500000"
                       });

                      const rawLogs = JSON.parse(result.rawLog);
                      const valueObject = JSON.parse(rawLogs[0].events[1].attributes[0].value);
                      console.log(`Result: ` + JSON.stringify(valueObject.result) + `\nTX Hash: ` + result.transactionHash);
                      alert(`Result: ` + JSON.stringify(valueObject.result) + `\nTX Hash: ${result.transactionHash}`);
                      location.reload();
                    }
                  } catch (error) {
                      console.log(error);
                      alert(`Submit error: ${error.message}`);
                    }
                },

                  
                  async submitReply(id, item) {
                    try {
                      if (!this.accountData) {
                        alert("Please connect your wallet to submit a reply.");
                        await this.connectToKeplr();
                      } else {
                        const result = await dysonVueStore.dispatch("dyson/sendMsgRun", {
                            "value": {
                              "creator": this.accountData.bech32Address,
                              "address": "dys1c2t867e7x33jw8c8mrl6cdvn89934k82tjvnqr",
                              "function_name": "add_reply",
                              "kwargs": JSON.stringify({ "body": item.newReply, "post_id": id }),
                              "coins": ""
                            },
                            "fee": [{ amount: '50', denom: 'dys' }],
                            "gas": "500000"
                        });

                        const rawLogs = JSON.parse(result.rawLog);
                        const valueObject = JSON.parse(rawLogs[0].events[1].attributes[0].value);
                        
                        console.log(`Result: ` + JSON.stringify(valueObject.result) + `\nTX Hash: ` + result.transactionHash);
                        alert(`Result: ` + JSON.stringify(valueObject.result) + `\nTX Hash: ${result.transactionHash}`);
                        
                        location.reload();
                      }
                    } catch (error) {
                      console.log(error);
                      alert(`Reply error: ${error.message}`);
                    }
                  },

                    
                  
                  async deletePost(id) {
                    
                    try {
                      if (this.accountData == null) {
                        alert("Connecting your wallet. Try to delete your post again once connected.");
                        await this.connectToKeplr();
                      } else {
                        const result = await dysonVueStore.dispatch("dyson/sendMsgRun", {
                          "value": {
                            "creator": this.accountData.bech32Address,
                            "address": "dys1c2t867e7x33jw8c8mrl6cdvn89934k82tjvnqr", // your script
                            "function_name": "delete_post",
                            "kwargs": JSON.stringify({ "post_id": id }),
                            "coins": ""
                          },
                          "fee": [{ amount: '50', denom: 'dys' }], gas: "500000"
                        });
                        
                        const rawLogs = JSON.parse(result.rawLog);
                        const valueObject = JSON.parse(rawLogs[0].events[1].attributes[0].value);
                        
                        console.log(`Result: ` + JSON.stringify(valueObject.result) + `\nTX Hash: ` + result.transactionHash);
                        alert(`Result: ` + JSON.stringify(valueObject.result) + `\nTX Hash: ${result.transactionHash}`);
                        
                        
                        location.reload();
                      }
                    } catch (error) {
                      console.log(error);
                      alert(`Delete error: ${error.message}`);
                    }
                  },

                  
                 },
                
                async mounted() {
                  
                  this.loading = true;
                  
                  // Check that kelpr is installed
                  if (window.getOfflineSigner) {
                    try {
                      const response = await fetch(
                        "https://api-dys-testnet.dysonvalidator.com/dyson/storageprefix" +
                        "?" +
                        new URLSearchParams({
                          prefix: "dys1c2t867e7x33jw8c8mrl6cdvn89934k82tjvnqr/post/",
                        })
                      );
                      const json = await response.json();
                      this.result = json;
                      this.result.storage.forEach((item) => {
                        item.data = JSON.parse(item.data);
                      });
                  
                      // connect to keplr after 5 seconds to give dyson chance to load
                      setTimeout(async () => {
                        await this.connectToKeplr();
                        await this.getUserData();
                        this.loading = false;
                      }, 5000);
                    } catch(error) {
                      console.log(error)
                    }
                  } else {
                    // Run when keplr is not installed
                    try {
                      const response = await fetch(
                      "https://api-dys-testnet.dysonvalidator.com/dyson/storageprefix" +
                      "?" +
                      new URLSearchParams({
                        prefix: "dys1c2t867e7x33jw8c8mrl6cdvn89934k82tjvnqr/post/",
                      })
                      );
                      const json = await response.json();
                      this.result = json;
                      this.result.storage.forEach((item) => {
                        item.data = JSON.parse(item.data);
                      });
                      this.loading = false;
                    } catch(error) {
                      console.log(error)
                    }
                  }
                },
                
                computed: {
                  sortedStorage() {
                    if (!this.result) {
                      return [];
                    }
                    let storage = this.result.storage
                    
                    // Show only users posts
                    if(this.showOnlyMyPosts && this.accountData.bech32Address) {
                      storage = storage.filter(item => item.data.author === this.accountData.bech32Address);
                      if (storage.length === 0) {
                        return [{ data: { body: "You haven't posted anything yet!" } }];
                      }
                    }
                    
                    // Switch between newest and oldest posts.
                    switch(this.sortOption) {
                      case "newest":
                        return storage.sort((a, b)=> b.data.id - a.data.id);
                      case "oldest":
                        return storage.sort((a, b)=> a.data.id - b.data.id);
                      default:
                        return [];
                    }
                  },
                 
                  remainingChars() {
                    const maxLength = 400
                    const currentLength = this.newPost.length
                    const remaining = maxLength - currentLength
                    return remaining
                  },
                  
                  isUserLoggedIn() {
                    return !!this.accountData && !!this.accountData.bech32Address;
                  },
                  
                },
              })
              app.mount('#app')
            </script>
            <footer class="footer has-text-centered">Dyson message board</footer>
            </div>
          </body>
        </html>
        """
    )
    .safe_substitute()
    .encode()
]


def application(environment, start_response):
    start_response("200 OK", [("Content-type", "text/html")])
    return html

